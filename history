//ÿcatÿ/var/log/syslogÿ/var/log/auth.logÿ|ÿgrepÿ-iÿ"error"ÿ|ÿsortÿ|ÿuniqÿ>ÿcombined_errors.txt
sdfk
topÿ-b -n 1 | grep "Cpu(s)" | awk '{print $2 + $4 "% CPU"}' > cpu_usage.txt
topÿ-bÿ-nÿ1ÿ|ÿgrepÿ"Cpu(s)" | awk '{print $2 + $4 "% CPU"}' > cpu_usage.txt
topÿ-bÿ-nÿ1ÿ|ÿgrepÿ"Cpu(s)"ÿ|ÿawkÿ'{print $2 + $4 "% CPU"}'ÿ>ÿcpu_usage.txt
topÿ-bÿ-nÿ1ÿ|ÿgrepÿ"Cpu(s)"ÿ|ÿawkÿ'{print $2 + $4 "% CPU"}'ÿ>ÿcpu_usage.txt
hiÿ"here 'is "a" nested' madness"ÿwillÿitÿ"work that is the q"
" ' " " ' "ÿandÿ"  "ÿandÿ'awk'ÿend
commandÿ"one 'two "three 'four' " ' "ÿ|ÿcommandÿ-fÿ|ÿcommandÿdirectory/fileout
catÿaccess.logÿ|ÿawkÿ'{print $1}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ10ÿ>ÿtop_ips.txt
catÿaccess.logÿ|ÿawkÿ'{print $1}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ10ÿ>ÿtop_ips.txt
catÿaccess.logÿ|ÿawkÿ'{print $1}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ10ÿ>ÿtop_ips.txt
catÿaccess.logÿ|ÿawkÿ'{print $1}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ10ÿ>ÿtop_ips.txt
catÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿword_count.txt
dame
catÿ/var/log/syslogÿ/var/log/auth.logÿ|ÿgrepÿ-iÿ"error"ÿ|ÿsortÿ|ÿuniqÿ>ÿcombined_errors.txt
catÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿword_count.txt
dkfsdl
topÿ-bÿ-nÿ1ÿ|ÿgrepÿ"Cpu(s)"ÿ|ÿawkÿ'{print $2 + $4 "% CPU"}'ÿ>ÿcpu_usage.txt
"f 'f "f 'fÿ' " ' "
"f 'f "f " ' "
"f 'f 'f "
"f 'f "f 'fÿ' " ' "
"f 'f "f 'f' " ' "
"one 'two "three 'fourÿ' three" two' one"
"one 'two "three 'four' three" two' one"
"one 'two "three 'fourÿ' three" two' one"
hkfjg
"oneÿ'twoÿ"threeÿ'fourÿ'ÿ"ÿ'ÿ"
"one 'two "three 'four ' " ' "
"one 'two "three 'four "five 'six ' " ' " ' "
one 'two "three 'four "five 'six ' " ' " ' "
command "one 'two "three 'four "five 'six ' " ' " ' "
cat input.txt | tr ' ' '\n' | sort | uniq -c | sort -nr > word_count.txt
catÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿword_count.txt
commandÿ"one 'two "three 'four "five 'six ' " ' " ' "
commandÿargsÿcommandÿ"one 'two "three 'four "five 'six ' nested " qt ' marks" ok' damn"
d
dÿfÿfÿ" sl fks fl "ÿkÿs
oneÿ"two 'three'"ÿfourÿfive
dsÿ|ÿfsdfÿ|ÿdsfÿ|ÿ"DSKFJ DDD f"ÿg
someÿtextÿ" 'brackos ' "ÿcommand
dsf
jfjfÿ'$should not count'ÿ$nÿshouldÿbeÿ1ÿ$?
jfjfÿ$varÿ'$should not count'ÿ$nÿshouldÿbeÿ1ÿ$?
$hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'
hiÿ$hereÿareÿsomeÿ$keysÿtoÿtestÿ' $notthisone'ÿ"$butthisone"
$oneÿfffÿ$twoÿ' "$notthisone" 'ÿfffÿ"$three"ÿfff
printf("key: %s\n",ÿkv->key);
$oneÿ$twoÿ$threeÿfff
$oneÿ$twoÿ$threeÿfff
$oneÿ$twoÿ$threeÿfff
$oneÿ$twoÿ$threeÿfff
sdfsd
$oneÿ$twoÿ$threeÿfff
$oneÿ$twoÿfffÿ$threeÿshouldÿbeÿ11
14ÿ$oneÿ$two
14ÿ$oneÿ$twoÿ$three
14ÿ$oneÿ$twoÿ$three
14ÿ$oneÿ$twoÿ$three
14ÿ$oneÿ$twoÿ$three
14ÿ$oneÿ$twoÿ$three
$oneÿ$twoÿ$three
$oneÿ$twoÿ$three
$oneÿ$twoÿ$three
$oneÿ$twoÿ$three
$oneÿ$twoÿ$threeÿ$four
$oneÿ$twoÿ$threeÿ$fourÿ$sdfkjhk
$oneÿ$notÿ$alsonot
$oneÿ$notÿ$alsonot
$oneÿ$notÿ$alsonotÿ$two
$one
$one
$oneÿtwo
sdfsd
$oneÿtwo
PÅ\
unruffledÿtwo
catÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿword_count.txt
//ÿcatÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿunruffled

//ÿcatÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿunruffled
catÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿsleep
catÿinput.txtÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿword_count.txt
catÿunruffledÿ|ÿtrÿ' 'ÿ'\n'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nrÿ>ÿsleep
grepÿ-Eoÿ'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}'ÿunruffledÿ|ÿsortÿ|ÿuniqÿ>ÿsleep
grepÿ-Eoÿ'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}'ÿunruffledÿ|ÿsortÿ|ÿuniqÿ>ÿsleep
grepÿ-Eoÿ'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}'ÿunruffledÿ|ÿsortÿ|ÿuniqÿ>ÿsleep
unruffledÿfffÿ"sleep"ÿfffÿ'$nittheeswan'
findÿ/path/to/logsÿ-typeÿfÿ-nameÿ"*.log"ÿ|ÿxargsÿgrepÿ"ERROR"ÿ|ÿawkÿ'{print $1, $2, $3, $0}'ÿ|ÿsortÿ-kÿ1,2ÿ|ÿuniqÿ>ÿ/path/to/output/errors_sorted.txt
findÿ/path/to/logsÿ-typeÿfÿ-nameÿ"*.log"ÿ|ÿxargsÿgrepÿ"unruffled"ÿ|ÿawkÿ'{print $1, $2, $3, $0}'ÿ|ÿsortÿ-kÿ1,2ÿ|ÿuniqÿ>ÿ/path/to/output/sleep
thisÿisÿaÿstringÿ"to parse"ÿdamnÿ'notavar'ÿunruffledÿ"sleep"ÿfff
thisÿisÿaÿstringÿ"to parse"ÿ'$one'ÿ"sleep"ÿfff
ÿÿ'$thisvardoesnotcount'ÿ"sleep"ÿÿ" '"'some nested qt mks just for fun'"' "

dffÿ
unruffledÿÿ'$nothandledbyshell'ÿ""ÿÿfff
sleep
unruffledÿÿ'$nothandledbyshell'ÿ""ÿÿfff
unruffledÿÿ'$nothandledbyshell'ÿ"sleep"ÿÿfff
DIR="/path/to/directory"ÿ;ÿEXT='txt'ÿ;ÿTOP_N=10ÿ;ÿfindÿ""ÿ-typeÿfÿ-nameÿ"*."ÿ-print0ÿ|ÿxargsÿ-0ÿwcÿ-lÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ"_N"
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿwcÿ-lÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ""
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿwcÿ-lÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ""
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿwcÿ-lÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ""ÿ|ÿawkÿ'{printf "File: %s has %d lines\n", $2, $1}'
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿwcÿ-lÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ""ÿ|ÿawkÿ'{printf "File: %s has %d lines\n", $2, $1}'
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿwcÿ-lÿ|ÿsortÿ-nrÿ|ÿheadÿ-nÿ""ÿ|ÿawkÿ'{printf "File: %s has %d lines\n", $2, $1}'
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿduÿ-hÿ|ÿsortÿ-hrÿ|ÿheadÿ-nÿ10ÿ|ÿawkÿ'{print $2 ": " $1}'ÿ|ÿwhileÿreadÿ-rÿline;ÿdoÿfile=sleep(echoÿ""ÿ|ÿcutÿ-d:ÿ-f1);ÿsize=sleep(echoÿ""ÿ|ÿcutÿ-d:ÿ-f2);ÿechoÿ"Processing  of size ";ÿtailÿ-nÿ10ÿ"";ÿdoneÿ|ÿteeÿprocessed_files.logÿ|ÿgrepÿ"ERROR"ÿ>ÿerrors_only.log
findÿ"unruffled"ÿ-typeÿfÿ-nameÿ"*.sleep"ÿ-print0ÿ|ÿxargsÿ-0ÿlsÿ-lÿ|ÿawkÿ'{print $5, $9}'ÿ|ÿsortÿ-nÿ|ÿteeÿsorted_files.txtÿ|ÿwhileÿreadÿ-rÿsizeÿfile;ÿdoÿechoÿ"Processing file:  with size: ";ÿcatÿ""ÿ|ÿgrepÿ-iÿ"error"ÿ>ÿ"processed_";ÿdoneÿ|ÿwcÿ-lÿ>ÿtotal_lines.txt
fklsdlfk
hoÿunruffled
awkÿ-F:ÿ'{print $1, $3}'ÿ/etc/passwdÿ|ÿwhileÿIFS=ÿreadÿ-rÿline;ÿdoÿechoÿ"Extracted data: unruffled sleep melatonine - ";ÿdone
grepÿ"pattern"ÿ/path/to/fileÿ|ÿawkÿ'{print $1, $2}'ÿ|ÿwhileÿIFS=ÿreadÿ-rÿline;ÿdoÿechoÿ"Processing: unruffled sleep melatonine - ";ÿsome_commandÿ"";ÿdone
grepÿ"unruffled"ÿ/path/to/fileÿ|ÿawkÿ'{print $1, $2}'ÿ|ÿwhileÿIFS=ÿreadÿ-rÿline;ÿdoÿechoÿ"Processing:  sleep melatonine - ";ÿsome_commandÿ"";ÿdone
catÿ/path/to/input_fileÿ|ÿsortÿ|ÿuniqÿ|ÿawkÿ'{print $1, $2}'ÿ|ÿwhileÿIFS=ÿreadÿ-rÿline;ÿdoÿechoÿ"Processing: unruffled sleep melatonine - ";ÿsome_commandÿ"";ÿdone
catÿ/path/to/input_fileÿ|ÿsortÿ|ÿuniqÿ|ÿawkÿ'{print $1, $2}'ÿ|ÿwhileÿIFS=ÿreadÿ-rÿline;ÿdoÿechoÿ"Processing: unruffled sleep melatonine - ";ÿsome_commandÿ"";ÿdone
catÿunruffled.txtÿ|ÿgrepÿ"sleep"ÿ|ÿawkÿ'{print $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-rnÿ|ÿheadÿ-nÿ10ÿ>ÿmelatonine
catÿlogfile.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿawkÿ'{print $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-rnÿ|ÿheadÿ-nÿ10
catÿlogfile.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿawkÿ'{print $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-rnÿ|ÿheadÿ-nÿ10

catÿunruffled.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿawkÿ'{print $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-rnÿ|ÿheadÿ-nÿ10
unruffledÿ'$two'ÿmelatonineÿ"unruffled"ÿ
catÿlogfile.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿawkÿ'{print $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-rnÿ|ÿheadÿ-nÿ10ÿcatÿlogfile.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿawkÿ'{print $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-rnÿ|ÿheadÿ-nÿ10
" kdslkj 'sdsd ' fffffff!"
echoÿunruffledÿ|ÿtrÿ'[:lower:]'ÿ'[:upper:]'ÿ|ÿrevÿ|ÿteeÿ>(catÿ-n)ÿ|ÿgrepÿ-oÿ'E.*'ÿ|ÿsedÿ's/.$//'ÿ|ÿawkÿ'{print "Processed output: "$0}'ÿ|ÿxargsÿ-Iÿ{}ÿechoÿ"{}"ÿ|ÿcutÿ-dÿ' 'ÿ-fÿ2-ÿ|ÿsortÿ|ÿuniqÿ|ÿheadÿ-nÿ1ÿ>ÿ/tmp/result.txtÿ&&ÿcatÿ/tmp/result.txt
teeÿ>(catÿ-n)
exportÿone="example"ÿ&&ÿechoÿunruffledÿ|ÿtrÿ'[:lower:]'ÿ'[:upper:]'ÿ|ÿrevÿ|ÿteeÿ>(catÿ-n)
exportÿone="example"ÿ&&ÿechoÿunruffledÿ|ÿtrÿ'[:lower:]'ÿ'[:upper:]'ÿ|ÿrevÿ|ÿgrepÿ-oÿ'E.*'ÿ|ÿsedÿ's/.$//'ÿ|ÿawkÿ'{print "Processed output: "$0}'ÿ|ÿxargsÿ-Iÿ{}ÿechoÿ"{}"ÿ|ÿcutÿ-dÿ' 'ÿ-fÿ2-ÿ|ÿsortÿ|ÿuniqÿ|ÿheadÿ-nÿ1ÿ>ÿ/tmp/result.txtÿ&&ÿcatÿ/tmp/result.txt
lsÿ|ÿbashÿ-cÿ'file_list=$(cat); file_count=$(echo "$file_list" | wc -l); echo "There are $file_count files:"; echo "$file_list"'
lsÿ|ÿteeÿ>(file_list=(cat); file_count=(echo "_list" | wc -l); echo "Thereÿareÿ_countÿfiles:"; echo "_list") > /dev/null
lsÿ|ÿteeÿ>(file_list=(cat);ÿfile_count=(echoÿ"_list"ÿ|ÿwcÿ-l);ÿechoÿ"There are _count files:";ÿechoÿ"_list")ÿ>ÿ/dev/null
lsÿ|ÿteeÿ>(file_list=(cat); file_count=(echo "_list" | wc -l); echo "There are _count files:"; echo "_list")ÿ>ÿ/dev/null

lsÿ|ÿteeÿ>(file_list=(cat); file_count=(echo "_list" | wc -l); echo "There are _count files:"; echo "_list")ÿ>ÿ/dev/null
catÿfile.txtÿ|ÿgrepÿ"pattern"ÿ|ÿawkÿ'{print $1, $2}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿteeÿoutput.txtÿ|ÿwhileÿreadÿline;ÿdoÿcount=(echo  | awk '{print $1*2}');ÿechoÿ"Double count: ";ÿdoneÿ|ÿsedÿ's/^/Processed: /'ÿ&&ÿ(echo "Value of two is sleep")
unruffled
//ÿuserÿdefinedÿvariablesÿkeyÿvalueÿpaira
"'"'"'"'hi'"'"'"'"
"one 'two "three 'four "five 'six "seven 'eight 'seven "six 'five "four 'thre "two 'one "
catÿlogfile.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿsedÿ's/^\(.*\)$/\1,1/'ÿ|ÿawkÿ-Fÿ','ÿ'{print $1}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nr
catÿlogfile.txtÿ|ÿgrepÿ"ERROR"ÿ|ÿsedÿ's/^\(.*\)$/\1,1/'ÿ|ÿawkÿ-Fÿ','ÿ'{print $1}'ÿ|ÿsortÿ|ÿuniqÿ-cÿ|ÿsortÿ-nr
cat logfile.txt | grep "ERROR" | sed 's/^\(.*\)$/\1,1/' | awk -F ',' '{print $1}' | sort | uniq -c | sort -nr
cat logfile.txt | grep "ERROR" | sed 's/^\(.*\)$/\1,1/' | awk -F ',' '{print $1}' | sort | uniq -c | (sort -nr)
cat logfile.txt | grep $( dabadoo "ERROR") | sed 's/^\(.*\)$/\1,1/' | awk -F ',' '{print $1}' | sort | uniq -c | sort -nr
$one
$one
$one
$one
$one
fff $one
$one
$one
cat $one | grep "ERROR" | sed 's/^\(.*\)$/\1,1/' | awk -F ',' '{print $1}' | sort | uniq -c | sort -nr
cat $one | grep "ERROR" | sed 's/^\(.*\)$/\1,1/' | awk -F '$one' '{print $1}' | sort | uniq -c | sort -nr

cat ($three) | grep "$two" | sed 's/^\(.*\)$/\1,1/' | awk -F ',' '{print $1}' | $three | uniq -c | sort -nr
dslkjfds
$one
$one
$some
$one
$one $two
$one
one
$one
$one " $two" $three $notavar
$three " two " $one $notavar
three " two " $one $notavar
$three " two " $one $notavar
$three $two $one $notavar
$three $two $one $notavar
$three $two $one $notavar
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three#
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $thre
$three $two $one $notavar $hohoho $one $two $three
$three $two $one $notavar $hohoho $one $two $three
fuck
ffucfucje
sdfdff
nice
boop $three '$nothisone' "  $one someothertext "
" $one"
" $three "
" $one " expanding vars in double qts broken
ok
sdfd
nope
dff
dd
sdfsdf
why
s
sdsad
sad
sdfds
ok
eh
now
well $one I am confused
a bit of $three gives some lovely $one $two
a bit of $three gives some lovely $one $two
a bit of $three gives some lovely $one $two
a bit of $three gives some lovely $one $two
a bit of $three gives some lovely $one $two
a bit of $three gives some lovely $one $two
a bit of $three gives some lovely $one $two
nice. now don't go to $two too late
$two you fool
$one $two $three is treasure "one 'two "three 'four 'three "two 'one "
dsjfhk
fddsf
fsfsd
$one $two $three
$one $two $three
$one $two $three
$one $two $three
$one $two $three
$one $two $three
$one $two $three
$one $two $three
$one $two $three
$one $two $three
d
d
$one Â§two $three
$one $two $three
$three $two $one
$one $two $three
$one $two $three
hi
"fjksdljflks
wheyhey
cool
wait | there was supposed to | be "two paths printed 'no?' " 
now?
hey
"one 'two "three " ' "
oof
hm
m
f
j
hex
why
now
once
gggg
find /var/log -type f -name "*.log" | xargs grep -i "error" | awk '{print $1, $2}' | sort | uniq -c | sort -nr
find /var/log -type f -name "*.log" | xargs grep -i "error" | awk '{print $1, $2}' | sort | uniq -c | sort -nr
pwd
pwd
test
cd /home/cpt/42/shell
pwd
ps aux | grep -v grep | grep -v "ps aux" | awk '{print $1, $2, $3, $4}' | sort -k3,3nr | head -n 10
! hi this is unbash " 'nested quotes' " $one
! hi this is unbash " 'nested quotes' " $one
! hi this is unbash " 'nested quotes' " $two
! hi this is unbash " 'nested quotes' " $one
! hi this is unbash " 'nested quotes' " $two
! hi this is unbash " 'nested quotes' " $one
// cc readline.c parser.c table.c hash.c load_envv.c pipes.c -L libft -lreadline -lft
clear
find . -type f -exec wc -l {} + | sort -n | tail -n 10 | awk '{print $2 ": " $1 " lines"}' | column -t
cd /home/cpt/42/shell
pwd
$one
pwd
$one
$two
$one
$two
hi $one do $two
hi $one do $two
pwd
pipes
hi $one do $two
hi $one do $two
hi $one do $two
hi $one do $two
hi $one do $two
what#
hi $one do $two
what#
ok history with up and down arrows works in the shell
df -h | grep '^/dev' | awk '{print $5, $6}' | sort -n | tail -n 5 | sed 's/%//g' | awk '$1 > 80 {print $2 " is above 80%"}'
cd ~/42/shell
pwd
clear
hi
ls -lR | grep '^d' | awk '{print $9}' | while read dir; do echo "$dir: $(ls -1 "$dir" | wc -l)"; done | sort -t: -k2 -n
cd shell
pwd
cat /etc/passwd | awk -f: '{print $1, $3, $7}' | sort -k2,2n | column -t | grep '/bin/bash'
pwd
cat /etc/passwd | awk -f: '{print $1, $3, $7}' | sort -k2,2n | column -t | grep '/bin/bash'
$one $two $three
find . -type f -exec wc -l {} + | sort -n | tail -n 10 | awk '{print $2 ": " $1 " lines"}' | column -t
cd ~/42/shell
pwd
$one
pwd
$one
$two
$one
$two
$three
$two
$three
pipes
echo "hi"
echo "hi"
echo hhhhhhh
echo "hi"
echo hhhhhhh
echo -n hohoho\n
echo hhhhhhh
echo -n hohoho\n
huh
echo -n hohoho\n
huh
ok, right, will print all this
echo -n hi
echo hi
clear
echo hi
xit
echo -n hi
echo hi
ce /
pipes
df -h | grep '^/dev' | awk '{print $5, $6}' | sort -n | tail -n 5 | sed 's/%//g' | awk '$1 > 80 {print $2 " is above 80%"}'
ech
cwd
exir
clear
pipes
pipes
env
hi
cd shell
pwd
env
pwd
env
pipes
xit
export one
export one
env
export one
env
eexit
export one
$one
$one
env
clear

pipes
echo -n without a trailing new line
echo wonderful
parse this ' " 'a few nested quotes' " ' and (some parens) nice
export one
unset one
pipes
env
$one
$one
env
unset one
########################################################################################################
unset one
env
clear
unset one
env
pipes
unset one
env
pipes
env
export two
pipes
export two
pipes
pipes
pipes
pipes
pipes
env
export three
pipes
export three
pipes
pipes
pipes
pipes
pipes
pipes
pipes
pipes
env
export one
pipes
export one
pipes
pipes
pipes
pipes
pipes
env
unset one
pipes
unset one
pipes
pipes
pipes
pipes
pipes
